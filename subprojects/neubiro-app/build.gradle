/*
 * Copyright 2014-2025 Stefano Gualdi, AGENAS, EUBIROD network.
 *
 * Licensed under the European Union Public Licence (EUPL), Version 1.1 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.text.SimpleDateFormat

buildscript {
  repositories {
    // jcenter()
    mavenCentral()
    mavenLocal()
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url 'https://repo1.maven.org/maven2/' }
    maven { url 'https://repo1.maven.org/maven2/org/codehaus/griffon/plugins/' }
  }

  dependencies {
    classpath 'org.codehaus.griffon:gradle-griffon-plugin:2.15.1'
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    classpath 'org.gradle.api.plugins:gradle-izpack-plugin:0.2.3'
    classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
    classpath 'com.github.cr0:gradle-macappbundle-plugin:3.1.0'
    classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.2'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
    classpath 'de.gliderpilot.gradle.jnlp:gradle-jnlp-plugin:1.2.5'
    classpath 'net.nemerosa:versioning:2.6.1'
    classpath 'edu.sc.seis.launch4j:launch4j:2.5.1'
  }
}

apply plugin: 'groovy'
apply plugin: 'org.codehaus.griffon.griffon'
apply plugin: 'net.nemerosa.versioning'
apply plugin: 'edu.sc.seis.launch4j'

repositories {
  mavenCentral()
  // jcenter()

  flatDir {
    dirs 'lib'
  }
}

Date buildTimeAndDate = new Date()
ext {
  buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
  buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
  macosx = System.getProperty('os.name').contains('Mac OS')
}

griffon {
  disableDependencyResolution = false
  includeGroovyDependencies = true
  version = '2.15.1'
  toolkit = 'swing'
  applicationProperties = [
    'build_date'    : buildDate,
    'build_time'    : buildTime,
    'build_revision': versioning.info.commit
  ]
}

mainClassName = 'eu.eubirod.neubiro.Launcher'

apply from: 'gradle/publishing.gradle'
apply from: 'gradle/docs.gradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.kordamp.gradle.stats'
apply plugin: 'com.github.ben-manes.versions'

sourceCompatibility = 11
targetCompatibility = 11

dependencies {
  compile "org.codehaus.griffon:griffon-guice:${griffon.version}"
  compile "javax.annotation:javax.annotation-api:1.3.2"

  // compile 'org.codehaus.griffon.plugins:griffon-miglayout-swing-groovy:1.1.1'
  compile 'org.codehaus.griffon.plugins:griffon-miglayout-swing-groovy:2.0.0'
  // compile 'org.codehaus.griffon.plugins:griffon-glazedlists-swing-groovy:1.3.1'
  compile 'org.codehaus.griffon.plugins:griffon-glazedlists-swing-groovy:1.4.0'

  compile "com.jgoodies:forms:${jgoodiesformsVersion}"
  compile "org.divxdede:jbusycomponent:${jbusycomponentVersion}"
  compile name: 'griffon-jbusycomponent-swing-0.1.0'
  compile name: 'griffon-jgoodies-forms-swing-0.1.0'

  compile(project(":neubiro-docbook4j"))

  // compile 'org.codehaus.griffon.plugins:griffon-fontawesome-swing-groovy:1.4.0'

  compile 'com.h2database:h2:1.4.200'
  compile 'org.yaml:snakeyaml:1.17'

  compile 'commons-lang:commons-lang:2.6'
  compile 'commons-net:commons-net:3.5'

  compile 'net.sf.opencsv:opencsv:2.3'

  compile 'com.github.jbytecode:RCaller:3.0.2'

  compile name: 'fontbox-1.3.1'
  compile name: 'fop-pdf-images-2.0.0'
  compile name: 'jempbox-1.3.1'
  compile name: 'pdfbox-1.3.1'

  compile 'net.java.dev.jna:jna-platform:5.9.0'

  runtime 'org.slf4j:slf4j-api:1.7.5'
  runtime 'ch.qos.logback:logback-classic:1.2.3'

  testCompile "org.codehaus.griffon:griffon-fest-test:${griffon.version}"
  testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
  testCompile('org.awaitility:awaitility-groovy:2.0.0') {
    exclude group: 'org.codehaus.groovy', module: 'groovy-all'
  }
  testCompile 'org.codehaus.groovy:groovy-all:2.4.7'
}

tasks.withType(JavaCompile) {
  sourceCompatibility = project.sourceCompatibility
  targetCompatibility = project.targetCompatibility
}

tasks.withType(GroovyCompile) {
  sourceCompatibility = project.sourceCompatibility
  targetCompatibility = project.targetCompatibility
}

import com.github.jengelman.gradle.plugins.shadow.transformers.*

shadowJar {
  transform(ServiceFileTransformer)
  transform(ServiceFileTransformer) {
    path = 'META-INF/griffon'
  }
  transform(ServiceFileTransformer) {
    path = 'META-INF/types'
  }
  transform(PropertiesFileTransformer) {
    paths = [
      'META-INF/editors/java.beans.PropertyEditor'
    ]
  }
}

launch4j {
  mainClassName = project.mainClassName

  bundledJrePath = "jre/jdk-11.0.14.1+1-jre"
  bundledJre64Bit = true

  jreMinVersion = "11"
  jdkPreference = "preferJre"
  jreRuntimeBits = "64/32"

  icon = project.projectDir.toString() + '/src/media/neubiro.ico'
  splashFileName = project.projectDir.toString() + '/src/media/neubiro-splash.bmp'

  // initialHeapSize = 512
  // maxHeapSize = 2048

  outfile = project.applicationName + '.exe'

  version = project.version
  textVersion = project.version
  copyright = "EUBIROD network"
  companyName = ""
  fileDescription = project.name
  productName = project.name
  internalName = project.name
}

distributions {
  main {
    baseName = project.applicationName
    contents {
      from('build/launch4j') {
        include '*.exe'
      }
      from('src/media') {
        include '*.png'
        into 'resources'
      }
      from('src/scripts') {
        into 'bin'
      }
      from(zipTree('src/jre/OpenJDK11U-jre_x64_windows_hotspot_11.0.14.1_1.zip')) {
        into 'jre'
      }
    }
  }
}
distZip.dependsOn "createExe"

startScripts {
  applicationName = project.applicationName
  doLast {
    // Fix launch script for linux
    // if (!macosx) unixScript.text = unixScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
    unixScript.text = unixScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
    windowsScript.text = windowsScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
  }
}

task dbconsole(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  main = 'org.h2.tools.Console'
}

if (hasProperty('debugRun') && ((project.debugRun as boolean))) {
  run {
    jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
  }
}

run {
  // args = ['en']
}
